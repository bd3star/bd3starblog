{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_data/footer.swig","hash":"7220a4e13b4c3b60c16f02a1267a495e43e6487a","modified":1610388723686},{"_id":"source/_posts/My-New-Post.md","hash":"987856d318410046589c0a26f85345a476209c40","modified":1610387717216},{"_id":"source/_posts/hello-world.md","hash":"e076216bfa5ce909f136d0c4e930463ded8cad74","modified":1610387717222},{"_id":"source/about/index.md","hash":"5175ce8de5ec9c0b99f5b62c71baf6517fbb55ce","modified":1610387516549},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么.md","hash":"c53a838d62060d4880c148e41b56808c9f0924b4","modified":1610387672530},{"_id":"source/categories/index.md","hash":"835fea49ce6347496454bfac1a5b5e41be570a64","modified":1610387424137},{"_id":"source/archives/index.md","hash":"e5196f5c76273fe62e7cb51fa5934996998f95f4","modified":1610387516543},{"_id":"source/tags/index.md","hash":"868a2e19b2615ae3f739749aaadf5cc99e386408","modified":1610387447827},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/02.png","hash":"4ac5057e5ad6675c8c23c61f03ecc16349ffbab8","modified":1610214547518},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/04.jpg","hash":"f6abb5b686eea23dff9a4367d3aab09f49f5d4dc","modified":1610222129893},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/06.jpg","hash":"2468b58e034e6c951df1512c00eb3e98c74ccde5","modified":1610222260617},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/PoXing.jpg","hash":"969abf3ebafe13bf4462b9de884807e0f07cf9cc","modified":1610224697626},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/01.png","hash":"d2f1c63ecf76df2ed9919465b0f0f74a6d3c3f92","modified":1610213732092},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/05.png","hash":"ded456a71956f5b31031956f80c72b04f6bc4cb4","modified":1610222215636},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/07.jpg","hash":"caa4878805285a193f0013a99533e5aa5cd3d376","modified":1610225623192},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/03.png","hash":"fe0cfc00aa62e93c8110ce8ac07b4c4311f9976d","modified":1610222099389},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/封面图.png","hash":"5ff479a098e5200ef40bc6a879b8e45d84742e03","modified":1610224588573},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1610386296021},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1610386296020},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1610386296021},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1610386296030},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1610386296029},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1610386296030},{"_id":"themes/next/_config.yml","hash":"ce67b88af6dd46d013cdb6af45bcc15748390040","modified":1610464233609},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1610386296031},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1610386296104},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1610386296031},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1610386296033},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1610386296045},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1610386296026},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1610386296022},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1610386296023},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1610386296025},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1610386296026},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1610386296027},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1610386296027},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1610386296028},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1610386296028},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1610386296029},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1610386296034},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1610386296034},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1610386296035},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1610386296028},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1610386296034},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1610386296035},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1610386296036},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1610386296037},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1610386296036},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1610386296037},{"_id":"themes/next/layout/_layout.swig","hash":"9938ee17004a8fc6be736762acc9a6c7f68c7622","modified":1610389238430},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1610386296101},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1610386296101},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1610386296102},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1610386296102},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1610386296104},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1610386296103},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1610386296047},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1610386296046},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1610386296048},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1610386296047},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1610386296050},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1610386296048},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1610386296049},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1610386296049},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1610386296051},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1610386296051},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1610386296050},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1610386296052},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1610386296054},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1610386296052},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1610386296053},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1610386296054},{"_id":"themes/next/languages/tr.yml","hash":"46e09f2119cbfbcf93fb8dbd267dccabeb8b0cda","modified":1610386296055},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1610386296056},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1610386296055},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1610386296056},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1610386296118},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1610386296057},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1610386296058},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1610386296024},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1610386296024},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1610386296024},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1610386296038},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1610386296025},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1610386296038},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1610386296040},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1610386296039},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1610386296039},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1610386296041},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1610386296042},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1610386296041},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1610386296043},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1610386296042},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1610386296044},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1610386296045},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1610386296059},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1610386296044},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1610386296060},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1610386296060},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1610386296061},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1610386296065},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1610386296067},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1610386296075},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1610386296061},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1610386296075},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1610386296076},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1610386296080},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1610386296079},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1610386296077},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1610386296088},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1610386296105},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1610386296114},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1610386296114},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1610386296115},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1610386296115},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1610386296116},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1610386296117},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1610386296117},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1610386296118},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1610386296118},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1610386296118},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1610386296083},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1610386296119},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1610386296120},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1610386296119},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1610386296120},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1610386296121},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1610386296121},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1610386296122},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1610386296122},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1610386296123},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1610386296090},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1610386296124},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1610386296091},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1610386296158},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1610386296170},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610386296171},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610386296171},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610386296172},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610386296172},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610386296174},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610386296173},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610386296174},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610386296175},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610386296176},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610386296176},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610386296175},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610386296177},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610386296177},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1610386296178},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1610386296178},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1610386296180},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1610386296180},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1610386296182},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1610386296179},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"93da36ad9dedb975933f6ba487dd491480170936","modified":1610262825003},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1610386296063},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1610386296064},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1610386296064},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1610386296064},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1610386296065},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1610386296183},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1610386296062},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1610386296067},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1610386296062},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1610386296066},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1610386296070},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1610386296068},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1610386296069},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1610386296070},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1610386296071},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1610386296072},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1610386296072},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1610386296073},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1610386296078},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1610386296078},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1610386296078},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1610386296079},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1610386296074},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1610386296077},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1610386296082},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1610386296082},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1610386296083},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1610386296081},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1610386296085},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1610386296084},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1610386296086},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1610386296086},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1610386296085},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1610386296089},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1610386296087},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1610386296089},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1610386296087},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1610386296088},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1610386296092},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1610386296092},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1610386296090},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1610386296093},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1610386296095},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1610386296095},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1610386296099},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1610386296100},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1610386296106},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1610386296108},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1610386296107},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1610386296109},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1610386296110},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1610386296110},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1610386296111},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1610386296111},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1610386296112},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1610386296113},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1610386296113},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1610386296097},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1610386296167},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1610386296168},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1610386296098},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1610386296096},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1610386296168},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1610386296169},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1610388259522},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1610386296169},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1610386296181},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1610386296182},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"6964aecdc62466e6b529f6887558669925a36bc6","modified":1610388259523},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"6b4437a9cd8aa04329cc6220a595acfe1fb9b598","modified":1610388259526},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1610388259527},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1610386296125},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1610386296189},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1610386296125},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1610386296125},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1610386296134},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1610386296189},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1610386296142},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1610386296142},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1610386296148},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1610386296148},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1610386296149},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1610386296152},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1610386296152},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1610386296153},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1610386296157},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1610386296153},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1610386296159},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1610386296160},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1610386296160},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1610386296161},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1610386296160},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1610386296162},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1610386296162},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1610386296163},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1610386296164},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1610386296163},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1610386296164},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1610386296163},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1610386296165},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1610386296165},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1610386296166},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1610386296166},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1610386296166},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1610386296167},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1610388259471},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"78c4459d066ad795856608d603d780b53488073d","modified":1610388259486},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"834d825fadd5be0c298a2d463e3092a9bf2f7b9e","modified":1610388259527},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1610388256532},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"80eecf0c5c7f21b2678dc1c329f74de19b6a3a67","modified":1610388259453},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"dbd5e6bf89b76ad1f2b081578b239c7ae32755af","modified":1610388259516},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1610386296187},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1610386296126},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1610386296185},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1610386296126},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1610386296127},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1610386296129},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1610386296128},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1610386296127},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1610386296129},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1610386296130},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1610386296130},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1610386296129},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1610386296132},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1610386296131},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1610386296132},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1610386296131},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1610386296133},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1610386296134},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1610386296133},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1610386296134},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1610386296135},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1610386296136},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1610386296138},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1610386296136},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1610386296137},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1610386296137},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1610386296138},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1610386296139},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1610386296141},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1610386296140},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1610386296139},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1610386296141},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1610386296143},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1610386296143},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1610386296140},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1610386296144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1610386296144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1610386296144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1610386296145},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1610386296145},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1610386296146},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1610386296146},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1610386296147},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1610386296150},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1610386296150},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1610386296151},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1610386296151},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1610386296155},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1610386296154},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1610386296154},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1610386296155},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1610386296156},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1610386296156},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1610386296157},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1610388256533},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1610388256535},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1610388256533},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1610388256534},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"55a762007dd48d229ef89fe8d0882256dcbee41a","modified":1610388256534},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1610388256536},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1610388256536},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1610388256535},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1610388256537},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1610388256538},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"069ae10f1407682f9e0cb6135b85c9a2bec1e5dd","modified":1610388259479},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1610388256538},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1610388256539},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1610388256537},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1610388259226},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1610388259231},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1610388259302},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/22/504fa21ce1b75e3f898ffafc8d2a8bed8d00c9","hash":"7c6ee7a38812c72e52ecb5c2ad725a9f103923a6","modified":1610388259320},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1610388259262},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1610388259236},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1610388259311},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1610388259195},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/4b/2975337cf280e5555ca7a82dc7c2d4b437c5b0","hash":"d36f2c2b52c48d7f7cd0d0beb42be2ecd7534287","modified":1610388259316},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1610388259190},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/306daa49b7b24c4759a4e832bfba3531c53f49","hash":"32aa9d96315007f8d79cd162bc77398addfa6ddf","modified":1610388259330},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1610388259281},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1610388259307},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1610388259199},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1610388259249},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1610388259257},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1610388259244},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/8b/66994be5014f18d17347ff32232c91d51ad08c","hash":"a22da1680018e1ab95118216eb88115d2947930a","modified":1610388259349},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1610388259204},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1610388259220},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/8c/150fefb741be4edee07810003c8a845113e209","hash":"067de29d5efa0a46cdc8f9f113820e5e09bfa50a","modified":1610388259359},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1610388259298},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1610388259295},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1610388259210},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1610388259215},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ab/45cbef9bc70ceff60f1ed52f2a5c34f6ad5725","hash":"ee2fa8f3df0de9092a4fce015cefd76ea18f4cfd","modified":1610388259353},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1610388259276},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1610388259290},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1610388259271},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1610388259266},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b3/5fc481f71dd08037f6b9febb5ec02c790f843b","hash":"ed5aa3a748675544aaa141c182a317453dd1e774","modified":1610388259336},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d1/b8c85241243a80f16d56e7a50244d3695f6e6e","hash":"baf56a83286c72af11667786dc59e7c58d30e427","modified":1610388259326},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1610388259185},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1610388259285},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/fd/3e2cc9301ef9c1978ace2bd0aee99f47176661","hash":"09b27ad6cf69d4dcb926389e16913daccb5d2972","modified":1610388259343},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1610388259254},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"069ae10f1407682f9e0cb6135b85c9a2bec1e5dd","modified":1610388259481},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"069ae10f1407682f9e0cb6135b85c9a2bec1e5dd","modified":1610388259469},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1610386296188},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1610386296186},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"473e30291eac5f6d120dfe823b29ad4b2218f05a","modified":1610388259478},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1610388259469},{"_id":"public/about/index.html","hash":"2baf2fecb38f9ed8434ba4985f98d1c4ed32ea97","modified":1610464074906},{"_id":"public/archives/index.html","hash":"a00c253045e8d913de8d81935ce98b422cb0c662","modified":1610464074906},{"_id":"public/categories/index.html","hash":"8126a2256d8cb2cc44d07e0b7b294066602e42b2","modified":1610464074906},{"_id":"public/tags/index.html","hash":"7f4723b27ef5d5e8b173b49fd942ab9d0e6fbc20","modified":1610464074906},{"_id":"public/2021/01/11/My-New-Post/index.html","hash":"5b8b2752c4e21da6aedeb1b970795aed67b2cfdc","modified":1610464074906},{"_id":"public/archives/2021/index.html","hash":"d356f048d33d0f66d9ebd73d6d2b4629a85e59ad","modified":1610464074906},{"_id":"public/archives/2021/01/index.html","hash":"55bf431e5bdc314af5ac9c2d5a417a800be9b9c2","modified":1610464074906},{"_id":"public/tags/Hello/index.html","hash":"f20b44041e2472a40263054e8b108e9a28f2ee23","modified":1610464074906},{"_id":"public/tags/World/index.html","hash":"1aeb13bbe2ef94c619b8a384888eb416651d9778","modified":1610464074906},{"_id":"public/tags/Spring/index.html","hash":"361207d59abcef8b9e16a972010a2790f8ce7675","modified":1610464074906},{"_id":"public/tags/SpringIoC/index.html","hash":"f04436d2c299f47aff6fe12999674536c255ff01","modified":1610464074906},{"_id":"public/categories/helloWorld/index.html","hash":"1468533d6505cfdf76dfce268576df5ea2170df1","modified":1610464074906},{"_id":"public/categories/重学Spring/index.html","hash":"43a488ba31a28fe227924ac5138c3f33ba8331c8","modified":1610464074906},{"_id":"public/2021/01/11/hello-world/index.html","hash":"d59577f2da70969e029381d1c9098315cde76ac1","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/index.html","hash":"cff6b0a0ed7792a308f7af51da7a10c906c814da","modified":1610464074906},{"_id":"public/index.html","hash":"e4728ff039c25d722f3452ba48b38356e234910f","modified":1610464074906},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610464074906},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610464074906},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610464074906},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610464074906},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610464074906},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610464074906},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610464074906},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610464074906},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610464074906},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610464074906},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610464074906},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610464074906},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610464074906},{"_id":"public/uploads/avatar.jpg","hash":"93da36ad9dedb975933f6ba487dd491480170936","modified":1610464074906},{"_id":"public/lib/canvas-nest/LICENSE","hash":"336611e76f0638d3d8aeca6b1b97138d2a07523f","modified":1610464074906},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/04.jpg","hash":"f6abb5b686eea23dff9a4367d3aab09f49f5d4dc","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/02.png","hash":"4ac5057e5ad6675c8c23c61f03ecc16349ffbab8","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/06.jpg","hash":"2468b58e034e6c951df1512c00eb3e98c74ccde5","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/07.jpg","hash":"caa4878805285a193f0013a99533e5aa5cd3d376","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/PoXing.jpg","hash":"969abf3ebafe13bf4462b9de884807e0f07cf9cc","modified":1610464074906},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1610464074906},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/01.png","hash":"d2f1c63ecf76df2ed9919465b0f0f74a6d3c3f92","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/05.png","hash":"ded456a71956f5b31031956f80c72b04f6bc4cb4","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/封面图.png","hash":"5ff479a098e5200ef40bc6a879b8e45d84742e03","modified":1610464074906},{"_id":"public/2021/01/11/看完此文-别说你不懂IoC是什么/03.png","hash":"fe0cfc00aa62e93c8110ce8ac07b4c4311f9976d","modified":1610464074906},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1610464074906},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1610464074906},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1610464074906},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1610464074906},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1610464074906},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1610464074906},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1610464074906},{"_id":"public/lib/canvas-nest/README.html","hash":"1540408b951f5fab35f77c66b94b4167cbf906c9","modified":1610464074906},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1610464074906},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1610464074906},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610464074906},{"_id":"public/css/main.css","hash":"95bae8b8d366dd83e2e0d9a1e385f7a5c93daad5","modified":1610464074906},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1610464074906},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1610464074906},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610464074906},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1610464074906},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"cfd471e048397dfd66bc4a0838db291d9fe8ea3f","modified":1610464456469},{"_id":"themes/next/source/css/_data/styles.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610464711635}],"Category":[{"name":"helloWorld","_id":"ckju4q9jt0004mkuv8yrqhe1f"},{"name":"重学Spring","_id":"ckju4q9jz000bmkuvguxt4a2f"}],"Data":[{"_id":"footer","data":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}],"Page":[{"title":"about","date":"2021-01-11T17:48:19.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-01-12 01:48:19\ntype: \"about\"   #这部分是新添加的\n---\n","updated":"2021-01-11T17:51:56.549Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckju4q9jk0000mkuv0qn807hz","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":""},{"title":"archives","date":"2021-01-11T17:48:48.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2021-01-12 01:48:48\ntype: \"archives\"   #这部分是新添加的\n---\n","updated":"2021-01-11T17:51:56.543Z","path":"archives/index.html","comments":1,"layout":"page","_id":"ckju4q9jr0002mkuv54w9093g","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":""},{"title":"categories","date":"2021-01-11T17:48:37.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-01-12 01:48:37\ntype: \"categories\"   #这部分是新添加的\n---\n","updated":"2021-01-11T17:50:24.137Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckju4q9ju0006mkuvddt08gmk","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-11T17:48:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-12 01:48:26\ntype: \"tags\"   #这部分是新添加的\n---\n","updated":"2021-01-11T17:50:47.827Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckju4q9jw0008mkuv6z5l15go","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":""}],"Post":[{"title":"My New Post","date":"2021-01-11T14:37:46.000Z","_content":"","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2021-01-11 22:37:46\ncategories: helloWorld\ntags: [Hello, World]\n---\n","slug":"My-New-Post","published":1,"updated":"2021-01-11T17:55:17.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckju4q9jo0001mkuv3kg7c2wf","content":"","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":""},{"title":"Hello World","date":"2021-01-11T14:41:14.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-01-11 22:41:14\ncategories: helloWorld\ntags: [Hello, World]\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-01-11T17:55:17.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckju4q9jr0003mkuv8uuz1tmf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"看完此文,别说你不懂IoC是什么?","date":"2021-01-11T14:41:14.000Z","description":"这是显示在首页的概述，正文内容均会被隐藏。","_content":"\n> 盆友圈都在晒十八岁，\n> 真羡慕你们可以发18岁的照片，我还要再等两年才能发。哎~惆怅..\n\n## 前言\n\n很多小伙伴会对Spring的IoC有些疑惑,什么是控制反转?\n我为何要使用IoC 把控制权交给容器这样对我有什么好处?\n书上只讲理论, 我现在都不能体会Spring的IoC用于不用相比有什么好处,\n由spring托管有什么好处呢？\n我现在感觉用spring 的set注入就是看起来代码NB点，\n完全不理解到底有什么优势啊……  \n基于如上让你彻底搞定理解IoC,从此不再困惑\n\n废话不多说(正文依旧有),我们开始吧!\n\n\n## 原生Servlet\n\n我们先从原生Servlet时代的三层架构(MVC)开始切入\n\n### 创建maven工程 引入依赖\n\n``` xml\n <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>3.1.0</version>\n    <scope>provided</scope>\n</dependency>\n\n```\n\n### 创建测试\n\n``` java\n@WebServlet(urlPatterns = \"/poXing\")\npublic class PoXingServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.getWriter().println(\"PoXingServlet run ......\");\n    }\n\n}\n```\n\n### 浏览器访问\n访问路径  \n<http://localhost:8080/spring-framework-ioc-learning/poXing>   \n(http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri)\n\n浏览器可输出 `PoXingServlet run ......`  此时已完成基础Servlet\n\n### 进一步优化 添加 Service 和 Dao\n\n\n> 这里为演示简单 并未引入输入库相关依赖 故此处 Dao 只是模拟有数据库的存在,\n不深入\n\n工程目录创建以下类与接口\n\n![目录截图](./01.png)\n\n三层架构中组件与依赖应如下图所示\n\n![关系图](./02.png)\n\n\n#### 添加Dao\n\n``` java\npublic interface IDemoDao {\n    List<String> findAll();\n}\n\n\n```\n\n``` java\npublic class DemoDaoImpl implements IDemoDao {\n    @Override\n    public List<String> findAll() {\n        // 此处为演示方便不连接数据库 模拟返回数据库list结果\n        return Arrays.asList(\"aaa\", \"bbb\", \"ccc\");\n    }\n\n}\n\n```\n\n\n#### 添加Service\n\n``` java\npublic interface IDemoService {\n    List<String> findAll();\n}\n\n```\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n    private IDemoDao demoDao = new DemoDaoImpl();\n\n    @Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n```\n\n#### 修改DemoServlet\n\n将我们前面创建的 `PoXingServlet` 内容拷贝 并加以修改\n\n``` java\n@WebServlet(urlPatterns = \"/demoServlet\")\npublic class DemoServlet extends HttpServlet {\n\n    IDemoService demoService = new DemoServiceImpl();\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        resp.getWriter().println(demoService.findAll().toString());\n    }\n}\n\n```\n\n#### 运行测试\n\n访问路径  \n<http://localhost:8080/spring-framework-ioc-learning/demoServlet>    \n(http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri)\n\n浏览器可输出 `['aaa', 'bbb', 'ccc']`  此时已完成基础Servlet\n\n\n基础搭建工作完成,下面才是**我们的重点! 我们的重点!! 我们的重点!!!**\n\n### 好吧 需求开始变更\n\n现在你已经完成了开发工作,数据库使用的Mysql\n增删改查都以实现(你就当做已经实现了...虽然我并没有写增删改)\n项目马上交付,此时你的领导(XX领导完全不懂技术)电话da来了.\n\n> 那个谁谁谁  最新我听说大公司都用Oracle数据库\n> 客户好像都觉得Oracle数据库更靠谱呢\n> 这样吧, 你也给我换成Oracle数据库\n\n此时你的内心应该是这样的 XX领导, XX不干了,\n\n\n![不乐意](./03.png)  ![都是我的错行了吧](./04.jpg)   ![我滚了](./05.png) ![跪着走完自己选择的路](./06.jpg)\n\n木头办法哎, 找下家太麻烦, 当前还是要恰饭的, 服从吧  咱小咱卑微 咱是干饭人 咱的错\n咱改\n\n#### 修改数据\n\n对于数据库的切换  我们知道  不仅要修改数据库连接池等相关的配置 还要修改\n相应的SQL语句(特定的SQL对于不同的数据库写法是不一样滴,分页就不一样), 咋办?\n改Dao层吧 于是乎 开始修改项目里所有的Dao实现类 也就是DaoImpl\n\n``` java\npublic class DemoDaoImpl implements IDemoDao {\n    @Override\n    public List<String> findAll() {\n        // 此处为演示方便不连接数据库 模拟返回数据库list结果\n//        return Arrays.asList(\"aaa\", \"bbb\", \"ccc\");\n        // 模拟修改成了Orcale的SQL的语句了\n        return Arrays.asList(\"xx领导(Oracle数据库)\", \"xx领导(Oracle数据库)\", \"xx领导(Oracle数据库)\");\n    }\n\n}\n\n\n``` \n\n哈哈 全部检查一遍  自动化测试也执行完  没毛病  搜易贼...\n可以摸鱼了...\n\n### 嘟嘟嘟  需求再次变更\n\n项目终于改完要交付了, 干了杯枸杞红枣茶, 摸鱼准备下班中...\n\n> 那个那个那个啥...  怎么Oracle数据库要花钱？？？ 公司最近客户还没有回款\n> 你把数据库还是换回MySQL吧 后面等客户给回款了我们再考虑用Oracle\n\n此时的你...\n\n![逐渐起了杀心](./07.jpg)\n\n哎 再一再二  我想大概也会有再三吧 整吧 这次我要想想办法了\n我把你的再三再四直接给你弄上  省的影响我摸鱼.\n\n#### 引入静态工厂\n\n我要创建一个静态工厂, 你想要啥数据库我给你整出来一个啥数据来\n这里暂时起名`BeanFactory` 别问为啥 我就想起这个名 我卑微我任性\n\n``` java\npublic class BeanFactory {\n    public static IDemoDao getDemoDao() {\n        // 返回 mysql 的 Dao\n        // return new DemoDaoImpl();\n        // 返回 oracle 的 Dao\n        return new DemoOracleDaoImpl();\n    }\n}\n\n\n```\n\n#### 改造Service实现即 ServiceImpl\nServiceImpl 中引用的 Dao 不再可以是手动 new 出来的了,\n而应该由 `BeanFactory` 的静态方法返回来获得\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n//    private IDemoDao demoDao = new DemoDaoImpl();\n    private IDemoDao demoDao = BeanFactory.getDemoDao();\n\n    @Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n```\n\n好了 即使你再发生变更(改回Oracle) 也不会影响我摸鱼了  \n我只是改改**BeanFactory中的静态方法而已**\n\n现在终于可以交付项目了, 终于.....\n\n抱歉(并不是你心里所想的会出啥事) 一切顺利 老板满意 客户满意  \n开会要给你先画个饼 鼓励一下咯\n\n### 又出现了新的问题\n\n系统已经上线运行  这个时候你已经着手进行下一个项目了,\n可是..可是 领导觉得你的任务最近不多呀 提出让你对上一个项目进行优化\n和扩展的需求, 这时候你再次打开了旧项目 居然发现项目编译不通过. 此处为了\n演示编译无法通过,删除`DemoDaoImpl.java`\n\n此时你的脑海里一定在翻滚,为么为么为么之前好好的,机器也没换啊,找到编译\n出错的类`BeanFactory`,我x, 我的类去哪儿了,去哪儿了,去哪儿了,三连问之后\n少了`DemoDaoImpl.java`  导致无法编译\n\n#### 依赖关系导致紧耦合\n\n``` java\n\npublic class BeanFactory {\n    public static IDemoDao getDemoDao() {\n        // 返回 mysql 的 Dao\n        // 因为 DemoDaoImpl.java不存在导致编译失败\n         return new DemoDaoImpl();\n        // 返回 oracle 的 Dao\n//        return new DemoOracleDaoImpl();\n    }\n}\n\n\n```\n\n`BeanFactory`类中因 `DemoDaoImpl.java` 的不存在 而报红, 导致编译没法通过\n像当前 `BeanFactory` **强依赖于** `DemoDaoImpl` (没有`DemoDaoImpl`就报红给你看)\n这就是**紧耦合**\n\n\n#### 解决紧耦合\n\n没有这个Java文件  我没法干活呀 要不我自己造一个空的？？？ 不行不行\n万一明天 `DemoOracleDaoImpl` 这个又没有了呢, 我不能总造空的玩呀\n突然此时 你灵光一现 好像 好像 反射大概似乎可能也许可以解决这个问题呢\n**反射可以声明一个类的全限定类名,进而获取它的字节码,这样也可以构造一个对象**\n\n于是乎 开干吧 `BeanFactory` 就成这样的了\n\n``` java\npublic class BeanFactory {\n\n    public static IDemoDao getDemoDao() {\n        try {\n            return (IDemoDao) Class.forName(\"com.huodd.dao.impl.DemoDaoImpl\").newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"IDemoDao instantiation error, cause: \" + e.getMessage());\n        }\n    }\n}\n\n```\n\n现在编译问题得以解决,虽然 `DemoService`在初始化的时候 还有有问题 但是整个项目\n起码不会无法编译了\n\n#### 弱依赖的引入\n\n当前使用了反射 编译通过 但是工程启动后 由于`BeanFactory` 要构造 `DemoDaoImpl`\n时确实还没有该类,所以会抛出`ClassNotFoundException`\n但是此时的`BeanFactory`对`DemoDaoImpl` 的依赖程度(你愿意丢你就丢 别影响我编译)\n就算的上是 **弱依赖**了\n\n#### 硬编码\n\n弱依赖的完成 你找遍电脑的各个盘 终于把 `DemoDaoImpl.java` 该类给找回来了,这下一切OK\n不影响编译了,不影响运行了,但是好像还哪里不大对呢, 要是再切换数据库呢, 我在工厂类里面\n写死了全限定类名,切换数据库的时候我还得去重新编译一遍工程才可以正常运行,\n应该还可以有办法. 可以考虑下.\n\n#### 引入外部化的配置文件\n\n机智如你呀,终究被你想到了**利用IO实现文件的存储配置**  每次`BeanFactory`\n被初始化时 就让他去读取**配置文件**就好了 我下次就改改配置文件就行了\n硬编码问题得以解决\n\n\n##### factory.properties 创建\n\n``` properties\ndemoDao=com.huodd.dao.impl.DemoDaoImpl\n\n```\n为方便取到全限定类名,前面是我们给类起的一个\"**别名**\"(类似于mybatis的xml中的alias思想)\n这样后面可以直接通过 \"**别名找到对应类的全限定名**\"\n\n##### BeanFactory 改造\n\n``` java\npublic class BeanFactory {\n    private static Properties properties;\n\n    // 使用静态代码块初始化properties，加载factord.properties文件\n    static {\n        properties = new Properties();\n        try {\n            // 必须使用类加载器读取resource文件夹下的配置文件\n            properties.load(BeanFactory.class.getClassLoader().getResourceAsStream(\"factory.properties\"));\n        } catch (IOException e) {\n            // BeanFactory类的静态初始化都失败了，那后续也没有必要继续执行了\n            throw new ExceptionInInitializerError(\"BeanFactory initialize error, cause: \" + e.getMessage());\n        }\n    }\n\t\n\tpublic static IDemoDao getDemoDao() {\n        String beanName = properties.getProperty(\"demoDao\");\n        try {\n            Class<?> beanClazz = Class.forName(beanName);\n            return (IDemoDao) beanClazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(\"BeanFactory have not [\" + beanName + \"] bean!\", e);\n        } catch (IllegalAccessException | InstantiationException e) {\n            throw new RuntimeException(\"[\" + beanName + \"] instantiation error!\", e);\n        }\n    }\n\n}\n\n\n\n```\n\n等等  等等  这里我们好像又把起的那个别名`demoDao`给写死了,得改 干脆**传参**吧\n要哪个全限定类名参数传哪个全限定类名对应的别名 此时 `getDemoDao`这个名字得改还要加参数 此时\n就叫`getBean`吧 根据别名获取相应的Bean对象\n\n``` java\npublic static IDemoDao getBean(String beanAlias) {\n        String beanName = properties.getProperty(\"beanAlias\");\n        try {\n            Class<?> beanClazz = Class.forName(beanName);\n            return (IDemoDao) beanClazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(\"BeanFactory have not [\" + beanName + \"] bean!\", e);\n        } catch (IllegalAccessException | InstantiationException e) {\n            throw new RuntimeException(\"[\" + beanName + \"] instantiation error!\", e);\n        }\n    }\n\n```\n\n\n##### ServiceImpl 改造\n\n`DemoServiceImpl` 中不能调用 `getDao` 方法(让我们给改成了`getBean(String beanAlias)`)了，\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n\tIDemoDao demoDao = (IDemoDao) BeanFactory.getBean(\"demoDao\");\n    \n\t@Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n``` \n到这里，你突然发现一个现象：\n这下你可以把**所有**想抽取出来的**组件都可以做成外部化配置**了！\n\nPS: 自行去`DemoServlet`里面把对`DemoServiceImpl`的紧耦合改正\n> 算了 简单说一下  \n> 在 `factory.properties` 外部配置化文件 加入 `demoService=com.huodd.service.impl.DemoServiceImpl`  \n> `DemoServlet`获取`DemoServiceImpl`改成 `IDemoService demoService = (IDemoService) BeanFactory.getBean(\"DemoServiceImpl\");`\n\n#### 外部配置化\n\n对于这种可能会变化的配置、属性等，通常不会直接硬编码在源代码中，\n而是抽取为一些配置文件的形式（ properties 、xml 、json 、yml 等），\n配合程序对配置文件的加载和解析，从而达到动态配置、降低配置耦合的目的。\n由此大概我们可以知道 原来并不是那些老外拍脑袋随便就乱搞才出来的这个IoC思想\n\n\n#### 多重构建问题\n\n细心的小伙伴可能已经发现 项目还会存在问题 影响性能的问题 也是很大的问题\n就是`BeanFactory#getBean(String beanAlias)` 会重复创建同一个对象的多个实例\n而我们根本就不需要每次都给我去创建新的对象实例,旧的就够用了\n因此处不是本文重点  小伙伴自行改进  这里给出一个大概的思路\n\n> 可以考虑引入缓存 将创建出来的实例缓存起来 每次我们从缓存中读取  \n> PS: 要多考虑一点哦 别忘了多线程并发问题\n\n\n到这里,不知道小伙伴是否对IOC有了个全新的认识和理解呢\n\n这里总结一下里面出现的几个关键点\n\n- 静态工厂可将多处依赖进行抽取分离\n- 外部化配置文件+反射可解决配置的硬编码问题\n- 缓存可控制对象实例数(这里我们并没有具体去实现小伙伴自行动手哦)\n\n接下来  是否解决了文章开始时小伙伴们的困惑呢？\n\n## IOC的思想引入\n\n``` java\n\nprivate IDemoDao dao = new DemoDaoImpl();\n\nprivate IDemoDao dao = (IDemoDao) BeanFactory.getBean(\"demoDao\");\n```\n\n对比如上两种方法获取`dao`\n- 前者强依赖/紧耦合 后者弱依赖/松散耦合\n- 前者需保证`DemoDaoImpl`存在才能通过编译\n  后者无需保证`DemoDaoImpl`存在就可以通过编译 倘若`factory.properties` 中声明的全限定类名出现错误，\n  则会出现`ClassCastException `\n\n\n仔细体会下面这种对象获取的方式，本来咱开发者可以使用上面的方式，\n主动声明实现类，但如果选择下面的方式，\n那就不再是咱自己去声明，而是将**获取对象的方式交给了**`BeanFactory` 。\n这种将**控制权交给别人**的思想，就可以称作：**控制反转（ Inverse of Control , IOC ）**。\n而 BeanFactory 根据指定的 beanName 去获取和创建对象的过程，\n就可以称作：**依赖查找（ Dependency Lookup , DL ）**。\n\n\n## 源码获取\n\n本文源代码获取 可添加公众号\"PoXing\" 回复【IOC】进行获取\n扫码添加一下吧~~~\n![公众号二维码](./PoXing.jpg)\n\n\n\n\n\n","source":"_posts/看完此文-别说你不懂IoC是什么.md","raw":"---\ntitle: '看完此文,别说你不懂IoC是什么?'\ndate: 2021-01-11 22:41:14\ncategories: 重学Spring\ntags: [Spring, SpringIoC]\ndescription: 这是显示在首页的概述，正文内容均会被隐藏。\n---\n\n> 盆友圈都在晒十八岁，\n> 真羡慕你们可以发18岁的照片，我还要再等两年才能发。哎~惆怅..\n\n## 前言\n\n很多小伙伴会对Spring的IoC有些疑惑,什么是控制反转?\n我为何要使用IoC 把控制权交给容器这样对我有什么好处?\n书上只讲理论, 我现在都不能体会Spring的IoC用于不用相比有什么好处,\n由spring托管有什么好处呢？\n我现在感觉用spring 的set注入就是看起来代码NB点，\n完全不理解到底有什么优势啊……  \n基于如上让你彻底搞定理解IoC,从此不再困惑\n\n废话不多说(正文依旧有),我们开始吧!\n\n\n## 原生Servlet\n\n我们先从原生Servlet时代的三层架构(MVC)开始切入\n\n### 创建maven工程 引入依赖\n\n``` xml\n <dependency>\n    <groupId>javax.servlet</groupId>\n    <artifactId>javax.servlet-api</artifactId>\n    <version>3.1.0</version>\n    <scope>provided</scope>\n</dependency>\n\n```\n\n### 创建测试\n\n``` java\n@WebServlet(urlPatterns = \"/poXing\")\npublic class PoXingServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.getWriter().println(\"PoXingServlet run ......\");\n    }\n\n}\n```\n\n### 浏览器访问\n访问路径  \n<http://localhost:8080/spring-framework-ioc-learning/poXing>   \n(http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri)\n\n浏览器可输出 `PoXingServlet run ......`  此时已完成基础Servlet\n\n### 进一步优化 添加 Service 和 Dao\n\n\n> 这里为演示简单 并未引入输入库相关依赖 故此处 Dao 只是模拟有数据库的存在,\n不深入\n\n工程目录创建以下类与接口\n\n![目录截图](./01.png)\n\n三层架构中组件与依赖应如下图所示\n\n![关系图](./02.png)\n\n\n#### 添加Dao\n\n``` java\npublic interface IDemoDao {\n    List<String> findAll();\n}\n\n\n```\n\n``` java\npublic class DemoDaoImpl implements IDemoDao {\n    @Override\n    public List<String> findAll() {\n        // 此处为演示方便不连接数据库 模拟返回数据库list结果\n        return Arrays.asList(\"aaa\", \"bbb\", \"ccc\");\n    }\n\n}\n\n```\n\n\n#### 添加Service\n\n``` java\npublic interface IDemoService {\n    List<String> findAll();\n}\n\n```\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n    private IDemoDao demoDao = new DemoDaoImpl();\n\n    @Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n```\n\n#### 修改DemoServlet\n\n将我们前面创建的 `PoXingServlet` 内容拷贝 并加以修改\n\n``` java\n@WebServlet(urlPatterns = \"/demoServlet\")\npublic class DemoServlet extends HttpServlet {\n\n    IDemoService demoService = new DemoServiceImpl();\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        resp.getWriter().println(demoService.findAll().toString());\n    }\n}\n\n```\n\n#### 运行测试\n\n访问路径  \n<http://localhost:8080/spring-framework-ioc-learning/demoServlet>    \n(http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri)\n\n浏览器可输出 `['aaa', 'bbb', 'ccc']`  此时已完成基础Servlet\n\n\n基础搭建工作完成,下面才是**我们的重点! 我们的重点!! 我们的重点!!!**\n\n### 好吧 需求开始变更\n\n现在你已经完成了开发工作,数据库使用的Mysql\n增删改查都以实现(你就当做已经实现了...虽然我并没有写增删改)\n项目马上交付,此时你的领导(XX领导完全不懂技术)电话da来了.\n\n> 那个谁谁谁  最新我听说大公司都用Oracle数据库\n> 客户好像都觉得Oracle数据库更靠谱呢\n> 这样吧, 你也给我换成Oracle数据库\n\n此时你的内心应该是这样的 XX领导, XX不干了,\n\n\n![不乐意](./03.png)  ![都是我的错行了吧](./04.jpg)   ![我滚了](./05.png) ![跪着走完自己选择的路](./06.jpg)\n\n木头办法哎, 找下家太麻烦, 当前还是要恰饭的, 服从吧  咱小咱卑微 咱是干饭人 咱的错\n咱改\n\n#### 修改数据\n\n对于数据库的切换  我们知道  不仅要修改数据库连接池等相关的配置 还要修改\n相应的SQL语句(特定的SQL对于不同的数据库写法是不一样滴,分页就不一样), 咋办?\n改Dao层吧 于是乎 开始修改项目里所有的Dao实现类 也就是DaoImpl\n\n``` java\npublic class DemoDaoImpl implements IDemoDao {\n    @Override\n    public List<String> findAll() {\n        // 此处为演示方便不连接数据库 模拟返回数据库list结果\n//        return Arrays.asList(\"aaa\", \"bbb\", \"ccc\");\n        // 模拟修改成了Orcale的SQL的语句了\n        return Arrays.asList(\"xx领导(Oracle数据库)\", \"xx领导(Oracle数据库)\", \"xx领导(Oracle数据库)\");\n    }\n\n}\n\n\n``` \n\n哈哈 全部检查一遍  自动化测试也执行完  没毛病  搜易贼...\n可以摸鱼了...\n\n### 嘟嘟嘟  需求再次变更\n\n项目终于改完要交付了, 干了杯枸杞红枣茶, 摸鱼准备下班中...\n\n> 那个那个那个啥...  怎么Oracle数据库要花钱？？？ 公司最近客户还没有回款\n> 你把数据库还是换回MySQL吧 后面等客户给回款了我们再考虑用Oracle\n\n此时的你...\n\n![逐渐起了杀心](./07.jpg)\n\n哎 再一再二  我想大概也会有再三吧 整吧 这次我要想想办法了\n我把你的再三再四直接给你弄上  省的影响我摸鱼.\n\n#### 引入静态工厂\n\n我要创建一个静态工厂, 你想要啥数据库我给你整出来一个啥数据来\n这里暂时起名`BeanFactory` 别问为啥 我就想起这个名 我卑微我任性\n\n``` java\npublic class BeanFactory {\n    public static IDemoDao getDemoDao() {\n        // 返回 mysql 的 Dao\n        // return new DemoDaoImpl();\n        // 返回 oracle 的 Dao\n        return new DemoOracleDaoImpl();\n    }\n}\n\n\n```\n\n#### 改造Service实现即 ServiceImpl\nServiceImpl 中引用的 Dao 不再可以是手动 new 出来的了,\n而应该由 `BeanFactory` 的静态方法返回来获得\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n//    private IDemoDao demoDao = new DemoDaoImpl();\n    private IDemoDao demoDao = BeanFactory.getDemoDao();\n\n    @Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n```\n\n好了 即使你再发生变更(改回Oracle) 也不会影响我摸鱼了  \n我只是改改**BeanFactory中的静态方法而已**\n\n现在终于可以交付项目了, 终于.....\n\n抱歉(并不是你心里所想的会出啥事) 一切顺利 老板满意 客户满意  \n开会要给你先画个饼 鼓励一下咯\n\n### 又出现了新的问题\n\n系统已经上线运行  这个时候你已经着手进行下一个项目了,\n可是..可是 领导觉得你的任务最近不多呀 提出让你对上一个项目进行优化\n和扩展的需求, 这时候你再次打开了旧项目 居然发现项目编译不通过. 此处为了\n演示编译无法通过,删除`DemoDaoImpl.java`\n\n此时你的脑海里一定在翻滚,为么为么为么之前好好的,机器也没换啊,找到编译\n出错的类`BeanFactory`,我x, 我的类去哪儿了,去哪儿了,去哪儿了,三连问之后\n少了`DemoDaoImpl.java`  导致无法编译\n\n#### 依赖关系导致紧耦合\n\n``` java\n\npublic class BeanFactory {\n    public static IDemoDao getDemoDao() {\n        // 返回 mysql 的 Dao\n        // 因为 DemoDaoImpl.java不存在导致编译失败\n         return new DemoDaoImpl();\n        // 返回 oracle 的 Dao\n//        return new DemoOracleDaoImpl();\n    }\n}\n\n\n```\n\n`BeanFactory`类中因 `DemoDaoImpl.java` 的不存在 而报红, 导致编译没法通过\n像当前 `BeanFactory` **强依赖于** `DemoDaoImpl` (没有`DemoDaoImpl`就报红给你看)\n这就是**紧耦合**\n\n\n#### 解决紧耦合\n\n没有这个Java文件  我没法干活呀 要不我自己造一个空的？？？ 不行不行\n万一明天 `DemoOracleDaoImpl` 这个又没有了呢, 我不能总造空的玩呀\n突然此时 你灵光一现 好像 好像 反射大概似乎可能也许可以解决这个问题呢\n**反射可以声明一个类的全限定类名,进而获取它的字节码,这样也可以构造一个对象**\n\n于是乎 开干吧 `BeanFactory` 就成这样的了\n\n``` java\npublic class BeanFactory {\n\n    public static IDemoDao getDemoDao() {\n        try {\n            return (IDemoDao) Class.forName(\"com.huodd.dao.impl.DemoDaoImpl\").newInstance();\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"IDemoDao instantiation error, cause: \" + e.getMessage());\n        }\n    }\n}\n\n```\n\n现在编译问题得以解决,虽然 `DemoService`在初始化的时候 还有有问题 但是整个项目\n起码不会无法编译了\n\n#### 弱依赖的引入\n\n当前使用了反射 编译通过 但是工程启动后 由于`BeanFactory` 要构造 `DemoDaoImpl`\n时确实还没有该类,所以会抛出`ClassNotFoundException`\n但是此时的`BeanFactory`对`DemoDaoImpl` 的依赖程度(你愿意丢你就丢 别影响我编译)\n就算的上是 **弱依赖**了\n\n#### 硬编码\n\n弱依赖的完成 你找遍电脑的各个盘 终于把 `DemoDaoImpl.java` 该类给找回来了,这下一切OK\n不影响编译了,不影响运行了,但是好像还哪里不大对呢, 要是再切换数据库呢, 我在工厂类里面\n写死了全限定类名,切换数据库的时候我还得去重新编译一遍工程才可以正常运行,\n应该还可以有办法. 可以考虑下.\n\n#### 引入外部化的配置文件\n\n机智如你呀,终究被你想到了**利用IO实现文件的存储配置**  每次`BeanFactory`\n被初始化时 就让他去读取**配置文件**就好了 我下次就改改配置文件就行了\n硬编码问题得以解决\n\n\n##### factory.properties 创建\n\n``` properties\ndemoDao=com.huodd.dao.impl.DemoDaoImpl\n\n```\n为方便取到全限定类名,前面是我们给类起的一个\"**别名**\"(类似于mybatis的xml中的alias思想)\n这样后面可以直接通过 \"**别名找到对应类的全限定名**\"\n\n##### BeanFactory 改造\n\n``` java\npublic class BeanFactory {\n    private static Properties properties;\n\n    // 使用静态代码块初始化properties，加载factord.properties文件\n    static {\n        properties = new Properties();\n        try {\n            // 必须使用类加载器读取resource文件夹下的配置文件\n            properties.load(BeanFactory.class.getClassLoader().getResourceAsStream(\"factory.properties\"));\n        } catch (IOException e) {\n            // BeanFactory类的静态初始化都失败了，那后续也没有必要继续执行了\n            throw new ExceptionInInitializerError(\"BeanFactory initialize error, cause: \" + e.getMessage());\n        }\n    }\n\t\n\tpublic static IDemoDao getDemoDao() {\n        String beanName = properties.getProperty(\"demoDao\");\n        try {\n            Class<?> beanClazz = Class.forName(beanName);\n            return (IDemoDao) beanClazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(\"BeanFactory have not [\" + beanName + \"] bean!\", e);\n        } catch (IllegalAccessException | InstantiationException e) {\n            throw new RuntimeException(\"[\" + beanName + \"] instantiation error!\", e);\n        }\n    }\n\n}\n\n\n\n```\n\n等等  等等  这里我们好像又把起的那个别名`demoDao`给写死了,得改 干脆**传参**吧\n要哪个全限定类名参数传哪个全限定类名对应的别名 此时 `getDemoDao`这个名字得改还要加参数 此时\n就叫`getBean`吧 根据别名获取相应的Bean对象\n\n``` java\npublic static IDemoDao getBean(String beanAlias) {\n        String beanName = properties.getProperty(\"beanAlias\");\n        try {\n            Class<?> beanClazz = Class.forName(beanName);\n            return (IDemoDao) beanClazz.newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new RuntimeException(\"BeanFactory have not [\" + beanName + \"] bean!\", e);\n        } catch (IllegalAccessException | InstantiationException e) {\n            throw new RuntimeException(\"[\" + beanName + \"] instantiation error!\", e);\n        }\n    }\n\n```\n\n\n##### ServiceImpl 改造\n\n`DemoServiceImpl` 中不能调用 `getDao` 方法(让我们给改成了`getBean(String beanAlias)`)了，\n\n``` java\npublic class DemoServiceImpl implements IDemoService {\n\n\tIDemoDao demoDao = (IDemoDao) BeanFactory.getBean(\"demoDao\");\n    \n\t@Override\n    public List<String> findAll() {\n        return demoDao.findAll();\n    }\n}\n\n``` \n到这里，你突然发现一个现象：\n这下你可以把**所有**想抽取出来的**组件都可以做成外部化配置**了！\n\nPS: 自行去`DemoServlet`里面把对`DemoServiceImpl`的紧耦合改正\n> 算了 简单说一下  \n> 在 `factory.properties` 外部配置化文件 加入 `demoService=com.huodd.service.impl.DemoServiceImpl`  \n> `DemoServlet`获取`DemoServiceImpl`改成 `IDemoService demoService = (IDemoService) BeanFactory.getBean(\"DemoServiceImpl\");`\n\n#### 外部配置化\n\n对于这种可能会变化的配置、属性等，通常不会直接硬编码在源代码中，\n而是抽取为一些配置文件的形式（ properties 、xml 、json 、yml 等），\n配合程序对配置文件的加载和解析，从而达到动态配置、降低配置耦合的目的。\n由此大概我们可以知道 原来并不是那些老外拍脑袋随便就乱搞才出来的这个IoC思想\n\n\n#### 多重构建问题\n\n细心的小伙伴可能已经发现 项目还会存在问题 影响性能的问题 也是很大的问题\n就是`BeanFactory#getBean(String beanAlias)` 会重复创建同一个对象的多个实例\n而我们根本就不需要每次都给我去创建新的对象实例,旧的就够用了\n因此处不是本文重点  小伙伴自行改进  这里给出一个大概的思路\n\n> 可以考虑引入缓存 将创建出来的实例缓存起来 每次我们从缓存中读取  \n> PS: 要多考虑一点哦 别忘了多线程并发问题\n\n\n到这里,不知道小伙伴是否对IOC有了个全新的认识和理解呢\n\n这里总结一下里面出现的几个关键点\n\n- 静态工厂可将多处依赖进行抽取分离\n- 外部化配置文件+反射可解决配置的硬编码问题\n- 缓存可控制对象实例数(这里我们并没有具体去实现小伙伴自行动手哦)\n\n接下来  是否解决了文章开始时小伙伴们的困惑呢？\n\n## IOC的思想引入\n\n``` java\n\nprivate IDemoDao dao = new DemoDaoImpl();\n\nprivate IDemoDao dao = (IDemoDao) BeanFactory.getBean(\"demoDao\");\n```\n\n对比如上两种方法获取`dao`\n- 前者强依赖/紧耦合 后者弱依赖/松散耦合\n- 前者需保证`DemoDaoImpl`存在才能通过编译\n  后者无需保证`DemoDaoImpl`存在就可以通过编译 倘若`factory.properties` 中声明的全限定类名出现错误，\n  则会出现`ClassCastException `\n\n\n仔细体会下面这种对象获取的方式，本来咱开发者可以使用上面的方式，\n主动声明实现类，但如果选择下面的方式，\n那就不再是咱自己去声明，而是将**获取对象的方式交给了**`BeanFactory` 。\n这种将**控制权交给别人**的思想，就可以称作：**控制反转（ Inverse of Control , IOC ）**。\n而 BeanFactory 根据指定的 beanName 去获取和创建对象的过程，\n就可以称作：**依赖查找（ Dependency Lookup , DL ）**。\n\n\n## 源码获取\n\n本文源代码获取 可添加公众号\"PoXing\" 回复【IOC】进行获取\n扫码添加一下吧~~~\n![公众号二维码](./PoXing.jpg)\n\n\n\n\n\n","slug":"看完此文-别说你不懂IoC是什么","published":1,"updated":"2021-01-12T15:23:56.405Z","_id":"ckju4q9jv0007mkuvdsw79p0y","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>盆友圈都在晒十八岁，<br>真羡慕你们可以发18岁的照片，我还要再等两年才能发。哎~惆怅..</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多小伙伴会对Spring的IoC有些疑惑,什么是控制反转?<br>我为何要使用IoC 把控制权交给容器这样对我有什么好处?<br>书上只讲理论, 我现在都不能体会Spring的IoC用于不用相比有什么好处,<br>由spring托管有什么好处呢？<br>我现在感觉用spring 的set注入就是看起来代码NB点，<br>完全不理解到底有什么优势啊……<br>基于如上让你彻底搞定理解IoC,从此不再困惑</p>\n<p>废话不多说(正文依旧有),我们开始吧!</p>\n<h2 id=\"原生Servlet\"><a href=\"#原生Servlet\" class=\"headerlink\" title=\"原生Servlet\"></a>原生Servlet</h2><p>我们先从原生Servlet时代的三层架构(MVC)开始切入</p>\n<h3 id=\"创建maven工程-引入依赖\"><a href=\"#创建maven工程-引入依赖\" class=\"headerlink\" title=\"创建maven工程 引入依赖\"></a>创建maven工程 引入依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = &quot;/poXing&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PoXingServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        response.getWriter().println(<span class=\"string\">&quot;PoXingServlet run ......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h3><p>访问路径<br><a href=\"http://localhost:8080/spring-framework-ioc-learning/poXing\">http://localhost:8080/spring-framework-ioc-learning/poXing</a><br>(<a href=\"http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri\">http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri</a>)</p>\n<p>浏览器可输出 <code>PoXingServlet run ......</code>  此时已完成基础Servlet</p>\n<h3 id=\"进一步优化-添加-Service-和-Dao\"><a href=\"#进一步优化-添加-Service-和-Dao\" class=\"headerlink\" title=\"进一步优化 添加 Service 和 Dao\"></a>进一步优化 添加 Service 和 Dao</h3><blockquote>\n<p>这里为演示简单 并未引入输入库相关依赖 故此处 Dao 只是模拟有数据库的存在,<br>不深入</p>\n</blockquote>\n<p>工程目录创建以下类与接口</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/01.png\" alt=\"目录截图\"></p>\n<p>三层架构中组件与依赖应如下图所示</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/02.png\" alt=\"关系图\"></p>\n<h4 id=\"添加Dao\"><a href=\"#添加Dao\" class=\"headerlink\" title=\"添加Dao\"></a>添加Dao</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处为演示方便不连接数据库 模拟返回数据库list结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加Service\"><a href=\"#添加Service\" class=\"headerlink\" title=\"添加Service\"></a>添加Service</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IDemoDao demoDao = <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改DemoServlet\"><a href=\"#修改DemoServlet\" class=\"headerlink\" title=\"修改DemoServlet\"></a>修改DemoServlet</h4><p>将我们前面创建的 <code>PoXingServlet</code> 内容拷贝 并加以修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = &quot;/demoServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    IDemoService demoService = <span class=\"keyword\">new</span> DemoServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().println(demoService.findAll().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h4><p>访问路径<br><a href=\"http://localhost:8080/spring-framework-ioc-learning/demoServlet\">http://localhost:8080/spring-framework-ioc-learning/demoServlet</a><br>(<a href=\"http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri\">http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri</a>)</p>\n<p>浏览器可输出 <code>[&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</code>  此时已完成基础Servlet</p>\n<p>基础搭建工作完成,下面才是<strong>我们的重点! 我们的重点!! 我们的重点!!!</strong></p>\n<h3 id=\"好吧-需求开始变更\"><a href=\"#好吧-需求开始变更\" class=\"headerlink\" title=\"好吧 需求开始变更\"></a>好吧 需求开始变更</h3><p>现在你已经完成了开发工作,数据库使用的Mysql<br>增删改查都以实现(你就当做已经实现了…虽然我并没有写增删改)<br>项目马上交付,此时你的领导(XX领导完全不懂技术)电话da来了.</p>\n<blockquote>\n<p>那个谁谁谁  最新我听说大公司都用Oracle数据库<br>客户好像都觉得Oracle数据库更靠谱呢<br>这样吧, 你也给我换成Oracle数据库</p>\n</blockquote>\n<p>此时你的内心应该是这样的 XX领导, XX不干了,</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/03.png\" alt=\"不乐意\">  <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/04.jpg\" alt=\"都是我的错行了吧\">   <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/05.png\" alt=\"我滚了\"> <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/06.jpg\" alt=\"跪着走完自己选择的路\"></p>\n<p>木头办法哎, 找下家太麻烦, 当前还是要恰饭的, 服从吧  咱小咱卑微 咱是干饭人 咱的错<br>咱改</p>\n<h4 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h4><p>对于数据库的切换  我们知道  不仅要修改数据库连接池等相关的配置 还要修改<br>相应的SQL语句(特定的SQL对于不同的数据库写法是不一样滴,分页就不一样), 咋办?<br>改Dao层吧 于是乎 开始修改项目里所有的Dao实现类 也就是DaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处为演示方便不连接数据库 模拟返回数据库list结果</span></span><br><span class=\"line\"><span class=\"comment\">//        return Arrays.asList(&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 模拟修改成了Orcale的SQL的语句了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>, <span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>, <span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>哈哈 全部检查一遍  自动化测试也执行完  没毛病  搜易贼…<br>可以摸鱼了…</p>\n<h3 id=\"嘟嘟嘟-需求再次变更\"><a href=\"#嘟嘟嘟-需求再次变更\" class=\"headerlink\" title=\"嘟嘟嘟  需求再次变更\"></a>嘟嘟嘟  需求再次变更</h3><p>项目终于改完要交付了, 干了杯枸杞红枣茶, 摸鱼准备下班中…</p>\n<blockquote>\n<p>那个那个那个啥…  怎么Oracle数据库要花钱？？？ 公司最近客户还没有回款<br>你把数据库还是换回MySQL吧 后面等客户给回款了我们再考虑用Oracle</p>\n</blockquote>\n<p>此时的你…</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/07.jpg\" alt=\"逐渐起了杀心\"></p>\n<p>哎 再一再二  我想大概也会有再三吧 整吧 这次我要想想办法了<br>我把你的再三再四直接给你弄上  省的影响我摸鱼.</p>\n<h4 id=\"引入静态工厂\"><a href=\"#引入静态工厂\" class=\"headerlink\" title=\"引入静态工厂\"></a>引入静态工厂</h4><p>我要创建一个静态工厂, 你想要啥数据库我给你整出来一个啥数据来<br>这里暂时起名<code>BeanFactory</code> 别问为啥 我就想起这个名 我卑微我任性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回 mysql 的 Dao</span></span><br><span class=\"line\">        <span class=\"comment\">// return new DemoDaoImpl();</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 oracle 的 Dao</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoOracleDaoImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"改造Service实现即-ServiceImpl\"><a href=\"#改造Service实现即-ServiceImpl\" class=\"headerlink\" title=\"改造Service实现即 ServiceImpl\"></a>改造Service实现即 ServiceImpl</h4><p>ServiceImpl 中引用的 Dao 不再可以是手动 new 出来的了,<br>而应该由 <code>BeanFactory</code> 的静态方法返回来获得</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    private IDemoDao demoDao = new DemoDaoImpl();</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IDemoDao demoDao = BeanFactory.getDemoDao();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>好了 即使你再发生变更(改回Oracle) 也不会影响我摸鱼了<br>我只是改改<strong>BeanFactory中的静态方法而已</strong></p>\n<p>现在终于可以交付项目了, 终于…..</p>\n<p>抱歉(并不是你心里所想的会出啥事) 一切顺利 老板满意 客户满意<br>开会要给你先画个饼 鼓励一下咯</p>\n<h3 id=\"又出现了新的问题\"><a href=\"#又出现了新的问题\" class=\"headerlink\" title=\"又出现了新的问题\"></a>又出现了新的问题</h3><p>系统已经上线运行  这个时候你已经着手进行下一个项目了,<br>可是..可是 领导觉得你的任务最近不多呀 提出让你对上一个项目进行优化<br>和扩展的需求, 这时候你再次打开了旧项目 居然发现项目编译不通过. 此处为了<br>演示编译无法通过,删除<code>DemoDaoImpl.java</code></p>\n<p>此时你的脑海里一定在翻滚,为么为么为么之前好好的,机器也没换啊,找到编译<br>出错的类<code>BeanFactory</code>,我x, 我的类去哪儿了,去哪儿了,去哪儿了,三连问之后<br>少了<code>DemoDaoImpl.java</code>  导致无法编译</p>\n<h4 id=\"依赖关系导致紧耦合\"><a href=\"#依赖关系导致紧耦合\" class=\"headerlink\" title=\"依赖关系导致紧耦合\"></a>依赖关系导致紧耦合</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回 mysql 的 Dao</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为 DemoDaoImpl.java不存在导致编译失败</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 返回 oracle 的 Dao</span></span><br><span class=\"line\"><span class=\"comment\">//        return new DemoOracleDaoImpl();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>BeanFactory</code>类中因 <code>DemoDaoImpl.java</code> 的不存在 而报红, 导致编译没法通过<br>像当前 <code>BeanFactory</code> <strong>强依赖于</strong> <code>DemoDaoImpl</code> (没有<code>DemoDaoImpl</code>就报红给你看)<br>这就是<strong>紧耦合</strong></p>\n<h4 id=\"解决紧耦合\"><a href=\"#解决紧耦合\" class=\"headerlink\" title=\"解决紧耦合\"></a>解决紧耦合</h4><p>没有这个Java文件  我没法干活呀 要不我自己造一个空的？？？ 不行不行<br>万一明天 <code>DemoOracleDaoImpl</code> 这个又没有了呢, 我不能总造空的玩呀<br>突然此时 你灵光一现 好像 好像 反射大概似乎可能也许可以解决这个问题呢<br><strong>反射可以声明一个类的全限定类名,进而获取它的字节码,这样也可以构造一个对象</strong></p>\n<p>于是乎 开干吧 <code>BeanFactory</code> 就成这样的了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) Class.forName(<span class=\"string\">&quot;com.huodd.dao.impl.DemoDaoImpl&quot;</span>).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;IDemoDao instantiation error, cause: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在编译问题得以解决,虽然 <code>DemoService</code>在初始化的时候 还有有问题 但是整个项目<br>起码不会无法编译了</p>\n<h4 id=\"弱依赖的引入\"><a href=\"#弱依赖的引入\" class=\"headerlink\" title=\"弱依赖的引入\"></a>弱依赖的引入</h4><p>当前使用了反射 编译通过 但是工程启动后 由于<code>BeanFactory</code> 要构造 <code>DemoDaoImpl</code><br>时确实还没有该类,所以会抛出<code>ClassNotFoundException</code><br>但是此时的<code>BeanFactory</code>对<code>DemoDaoImpl</code> 的依赖程度(你愿意丢你就丢 别影响我编译)<br>就算的上是 <strong>弱依赖</strong>了</p>\n<h4 id=\"硬编码\"><a href=\"#硬编码\" class=\"headerlink\" title=\"硬编码\"></a>硬编码</h4><p>弱依赖的完成 你找遍电脑的各个盘 终于把 <code>DemoDaoImpl.java</code> 该类给找回来了,这下一切OK<br>不影响编译了,不影响运行了,但是好像还哪里不大对呢, 要是再切换数据库呢, 我在工厂类里面<br>写死了全限定类名,切换数据库的时候我还得去重新编译一遍工程才可以正常运行,<br>应该还可以有办法. 可以考虑下.</p>\n<h4 id=\"引入外部化的配置文件\"><a href=\"#引入外部化的配置文件\" class=\"headerlink\" title=\"引入外部化的配置文件\"></a>引入外部化的配置文件</h4><p>机智如你呀,终究被你想到了<strong>利用IO实现文件的存储配置</strong>  每次<code>BeanFactory</code><br>被初始化时 就让他去读取<strong>配置文件</strong>就好了 我下次就改改配置文件就行了<br>硬编码问题得以解决</p>\n<h5 id=\"factory-properties-创建\"><a href=\"#factory-properties-创建\" class=\"headerlink\" title=\"factory.properties 创建\"></a>factory.properties 创建</h5><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">demoDao</span>=<span class=\"string\">com.huodd.dao.impl.DemoDaoImpl</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为方便取到全限定类名,前面是我们给类起的一个”<strong>别名</strong>“(类似于mybatis的xml中的alias思想)<br>这样后面可以直接通过 “<strong>别名找到对应类的全限定名</strong>“</p>\n<h5 id=\"BeanFactory-改造\"><a href=\"#BeanFactory-改造\" class=\"headerlink\" title=\"BeanFactory 改造\"></a>BeanFactory 改造</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用静态代码块初始化properties，加载factord.properties文件</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 必须使用类加载器读取resource文件夹下的配置文件</span></span><br><span class=\"line\">            properties.load(BeanFactory.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;factory.properties&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// BeanFactory类的静态初始化都失败了，那后续也没有必要继续执行了</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionInInitializerError(<span class=\"string\">&quot;BeanFactory initialize error, cause: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String beanName = properties.getProperty(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; beanClazz = Class.forName(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) beanClazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;BeanFactory have not [&quot;</span> + beanName + <span class=\"string\">&quot;] bean!&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;[&quot;</span> + beanName + <span class=\"string\">&quot;] instantiation error!&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>等等  等等  这里我们好像又把起的那个别名<code>demoDao</code>给写死了,得改 干脆<strong>传参</strong>吧<br>要哪个全限定类名参数传哪个全限定类名对应的别名 此时 <code>getDemoDao</code>这个名字得改还要加参数 此时<br>就叫<code>getBean</code>吧 根据别名获取相应的Bean对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getBean</span><span class=\"params\">(String beanAlias)</span> </span>&#123;</span><br><span class=\"line\">        String beanName = properties.getProperty(<span class=\"string\">&quot;beanAlias&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; beanClazz = Class.forName(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) beanClazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;BeanFactory have not [&quot;</span> + beanName + <span class=\"string\">&quot;] bean!&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;[&quot;</span> + beanName + <span class=\"string\">&quot;] instantiation error!&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ServiceImpl-改造\"><a href=\"#ServiceImpl-改造\" class=\"headerlink\" title=\"ServiceImpl 改造\"></a>ServiceImpl 改造</h5><p><code>DemoServiceImpl</code> 中不能调用 <code>getDao</code> 方法(让我们给改成了<code>getBean(String beanAlias)</code>)了，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tIDemoDao demoDao = (IDemoDao) BeanFactory.getBean(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到这里，你突然发现一个现象：<br>这下你可以把<strong>所有</strong>想抽取出来的<strong>组件都可以做成外部化配置</strong>了！</p>\n<p>PS: 自行去<code>DemoServlet</code>里面把对<code>DemoServiceImpl</code>的紧耦合改正</p>\n<blockquote>\n<p>算了 简单说一下<br>在 <code>factory.properties</code> 外部配置化文件 加入 <code>demoService=com.huodd.service.impl.DemoServiceImpl</code><br><code>DemoServlet</code>获取<code>DemoServiceImpl</code>改成 <code>IDemoService demoService = (IDemoService) BeanFactory.getBean(&quot;DemoServiceImpl&quot;);</code></p>\n</blockquote>\n<h4 id=\"外部配置化\"><a href=\"#外部配置化\" class=\"headerlink\" title=\"外部配置化\"></a>外部配置化</h4><p>对于这种可能会变化的配置、属性等，通常不会直接硬编码在源代码中，<br>而是抽取为一些配置文件的形式（ properties 、xml 、json 、yml 等），<br>配合程序对配置文件的加载和解析，从而达到动态配置、降低配置耦合的目的。<br>由此大概我们可以知道 原来并不是那些老外拍脑袋随便就乱搞才出来的这个IoC思想</p>\n<h4 id=\"多重构建问题\"><a href=\"#多重构建问题\" class=\"headerlink\" title=\"多重构建问题\"></a>多重构建问题</h4><p>细心的小伙伴可能已经发现 项目还会存在问题 影响性能的问题 也是很大的问题<br>就是<code>BeanFactory#getBean(String beanAlias)</code> 会重复创建同一个对象的多个实例<br>而我们根本就不需要每次都给我去创建新的对象实例,旧的就够用了<br>因此处不是本文重点  小伙伴自行改进  这里给出一个大概的思路</p>\n<blockquote>\n<p>可以考虑引入缓存 将创建出来的实例缓存起来 每次我们从缓存中读取<br>PS: 要多考虑一点哦 别忘了多线程并发问题</p>\n</blockquote>\n<p>到这里,不知道小伙伴是否对IOC有了个全新的认识和理解呢</p>\n<p>这里总结一下里面出现的几个关键点</p>\n<ul>\n<li>静态工厂可将多处依赖进行抽取分离</li>\n<li>外部化配置文件+反射可解决配置的硬编码问题</li>\n<li>缓存可控制对象实例数(这里我们并没有具体去实现小伙伴自行动手哦)</li>\n</ul>\n<p>接下来  是否解决了文章开始时小伙伴们的困惑呢？</p>\n<h2 id=\"IOC的思想引入\"><a href=\"#IOC的思想引入\" class=\"headerlink\" title=\"IOC的思想引入\"></a>IOC的思想引入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDemoDao dao = <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDemoDao dao = (IDemoDao) BeanFactory.getBean(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>对比如上两种方法获取<code>dao</code></p>\n<ul>\n<li>前者强依赖/紧耦合 后者弱依赖/松散耦合</li>\n<li>前者需保证<code>DemoDaoImpl</code>存在才能通过编译<br>后者无需保证<code>DemoDaoImpl</code>存在就可以通过编译 倘若<code>factory.properties</code> 中声明的全限定类名出现错误，<br>则会出现<code>ClassCastException </code></li>\n</ul>\n<p>仔细体会下面这种对象获取的方式，本来咱开发者可以使用上面的方式，<br>主动声明实现类，但如果选择下面的方式，<br>那就不再是咱自己去声明，而是将<strong>获取对象的方式交给了</strong><code>BeanFactory</code> 。<br>这种将<strong>控制权交给别人</strong>的思想，就可以称作：<strong>控制反转（ Inverse of Control , IOC ）</strong>。<br>而 BeanFactory 根据指定的 beanName 去获取和创建对象的过程，<br>就可以称作：<strong>依赖查找（ Dependency Lookup , DL ）</strong>。</p>\n<h2 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h2><p>本文源代码获取 可添加公众号”PoXing” 回复【IOC】进行获取<br>扫码添加一下吧~~~<br><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/PoXing.jpg\" alt=\"公众号二维码\"></p>\n","site":{"data":{"footer":"<script color=\"0,0,255\" opacity=\"0.5\" zIndex=\"-1\" count=\"99\" src=\"https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js\"></script>"}},"excerpt":"","more":"<blockquote>\n<p>盆友圈都在晒十八岁，<br>真羡慕你们可以发18岁的照片，我还要再等两年才能发。哎~惆怅..</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>很多小伙伴会对Spring的IoC有些疑惑,什么是控制反转?<br>我为何要使用IoC 把控制权交给容器这样对我有什么好处?<br>书上只讲理论, 我现在都不能体会Spring的IoC用于不用相比有什么好处,<br>由spring托管有什么好处呢？<br>我现在感觉用spring 的set注入就是看起来代码NB点，<br>完全不理解到底有什么优势啊……<br>基于如上让你彻底搞定理解IoC,从此不再困惑</p>\n<p>废话不多说(正文依旧有),我们开始吧!</p>\n<h2 id=\"原生Servlet\"><a href=\"#原生Servlet\" class=\"headerlink\" title=\"原生Servlet\"></a>原生Servlet</h2><p>我们先从原生Servlet时代的三层架构(MVC)开始切入</p>\n<h3 id=\"创建maven工程-引入依赖\"><a href=\"#创建maven工程-引入依赖\" class=\"headerlink\" title=\"创建maven工程 引入依赖\"></a>创建maven工程 引入依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建测试\"><a href=\"#创建测试\" class=\"headerlink\" title=\"创建测试\"></a>创建测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = &quot;/poXing&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PoXingServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        response.getWriter().println(<span class=\"string\">&quot;PoXingServlet run ......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h3><p>访问路径<br><a href=\"http://localhost:8080/spring-framework-ioc-learning/poXing\">http://localhost:8080/spring-framework-ioc-learning/poXing</a><br>(<a href=\"http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri\">http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri</a>)</p>\n<p>浏览器可输出 <code>PoXingServlet run ......</code>  此时已完成基础Servlet</p>\n<h3 id=\"进一步优化-添加-Service-和-Dao\"><a href=\"#进一步优化-添加-Service-和-Dao\" class=\"headerlink\" title=\"进一步优化 添加 Service 和 Dao\"></a>进一步优化 添加 Service 和 Dao</h3><blockquote>\n<p>这里为演示简单 并未引入输入库相关依赖 故此处 Dao 只是模拟有数据库的存在,<br>不深入</p>\n</blockquote>\n<p>工程目录创建以下类与接口</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/01.png\" alt=\"目录截图\"></p>\n<p>三层架构中组件与依赖应如下图所示</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/02.png\" alt=\"关系图\"></p>\n<h4 id=\"添加Dao\"><a href=\"#添加Dao\" class=\"headerlink\" title=\"添加Dao\"></a>添加Dao</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处为演示方便不连接数据库 模拟返回数据库list结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;ccc&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加Service\"><a href=\"#添加Service\" class=\"headerlink\" title=\"添加Service\"></a>添加Service</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IDemoDao demoDao = <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改DemoServlet\"><a href=\"#修改DemoServlet\" class=\"headerlink\" title=\"修改DemoServlet\"></a>修改DemoServlet</h4><p>将我们前面创建的 <code>PoXingServlet</code> 内容拷贝 并加以修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(urlPatterns = &quot;/demoServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    IDemoService demoService = <span class=\"keyword\">new</span> DemoServiceImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.getWriter().println(demoService.findAll().toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h4><p>访问路径<br><a href=\"http://localhost:8080/spring-framework-ioc-learning/demoServlet\">http://localhost:8080/spring-framework-ioc-learning/demoServlet</a><br>(<a href=\"http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri\">http://ip:端口号/[context-path(默认是工程名称可以自行修改)]/uri</a>)</p>\n<p>浏览器可输出 <code>[&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;]</code>  此时已完成基础Servlet</p>\n<p>基础搭建工作完成,下面才是<strong>我们的重点! 我们的重点!! 我们的重点!!!</strong></p>\n<h3 id=\"好吧-需求开始变更\"><a href=\"#好吧-需求开始变更\" class=\"headerlink\" title=\"好吧 需求开始变更\"></a>好吧 需求开始变更</h3><p>现在你已经完成了开发工作,数据库使用的Mysql<br>增删改查都以实现(你就当做已经实现了…虽然我并没有写增删改)<br>项目马上交付,此时你的领导(XX领导完全不懂技术)电话da来了.</p>\n<blockquote>\n<p>那个谁谁谁  最新我听说大公司都用Oracle数据库<br>客户好像都觉得Oracle数据库更靠谱呢<br>这样吧, 你也给我换成Oracle数据库</p>\n</blockquote>\n<p>此时你的内心应该是这样的 XX领导, XX不干了,</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/03.png\" alt=\"不乐意\">  <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/04.jpg\" alt=\"都是我的错行了吧\">   <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/05.png\" alt=\"我滚了\"> <img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/06.jpg\" alt=\"跪着走完自己选择的路\"></p>\n<p>木头办法哎, 找下家太麻烦, 当前还是要恰饭的, 服从吧  咱小咱卑微 咱是干饭人 咱的错<br>咱改</p>\n<h4 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h4><p>对于数据库的切换  我们知道  不仅要修改数据库连接池等相关的配置 还要修改<br>相应的SQL语句(特定的SQL对于不同的数据库写法是不一样滴,分页就不一样), 咋办?<br>改Dao层吧 于是乎 开始修改项目里所有的Dao实现类 也就是DaoImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoDao</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此处为演示方便不连接数据库 模拟返回数据库list结果</span></span><br><span class=\"line\"><span class=\"comment\">//        return Arrays.asList(&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// 模拟修改成了Orcale的SQL的语句了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>, <span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>, <span class=\"string\">&quot;xx领导(Oracle数据库)&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>哈哈 全部检查一遍  自动化测试也执行完  没毛病  搜易贼…<br>可以摸鱼了…</p>\n<h3 id=\"嘟嘟嘟-需求再次变更\"><a href=\"#嘟嘟嘟-需求再次变更\" class=\"headerlink\" title=\"嘟嘟嘟  需求再次变更\"></a>嘟嘟嘟  需求再次变更</h3><p>项目终于改完要交付了, 干了杯枸杞红枣茶, 摸鱼准备下班中…</p>\n<blockquote>\n<p>那个那个那个啥…  怎么Oracle数据库要花钱？？？ 公司最近客户还没有回款<br>你把数据库还是换回MySQL吧 后面等客户给回款了我们再考虑用Oracle</p>\n</blockquote>\n<p>此时的你…</p>\n<p><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/07.jpg\" alt=\"逐渐起了杀心\"></p>\n<p>哎 再一再二  我想大概也会有再三吧 整吧 这次我要想想办法了<br>我把你的再三再四直接给你弄上  省的影响我摸鱼.</p>\n<h4 id=\"引入静态工厂\"><a href=\"#引入静态工厂\" class=\"headerlink\" title=\"引入静态工厂\"></a>引入静态工厂</h4><p>我要创建一个静态工厂, 你想要啥数据库我给你整出来一个啥数据来<br>这里暂时起名<code>BeanFactory</code> 别问为啥 我就想起这个名 我卑微我任性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回 mysql 的 Dao</span></span><br><span class=\"line\">        <span class=\"comment\">// return new DemoDaoImpl();</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回 oracle 的 Dao</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoOracleDaoImpl();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"改造Service实现即-ServiceImpl\"><a href=\"#改造Service实现即-ServiceImpl\" class=\"headerlink\" title=\"改造Service实现即 ServiceImpl\"></a>改造Service实现即 ServiceImpl</h4><p>ServiceImpl 中引用的 Dao 不再可以是手动 new 出来的了,<br>而应该由 <code>BeanFactory</code> 的静态方法返回来获得</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    private IDemoDao demoDao = new DemoDaoImpl();</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IDemoDao demoDao = BeanFactory.getDemoDao();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>好了 即使你再发生变更(改回Oracle) 也不会影响我摸鱼了<br>我只是改改<strong>BeanFactory中的静态方法而已</strong></p>\n<p>现在终于可以交付项目了, 终于…..</p>\n<p>抱歉(并不是你心里所想的会出啥事) 一切顺利 老板满意 客户满意<br>开会要给你先画个饼 鼓励一下咯</p>\n<h3 id=\"又出现了新的问题\"><a href=\"#又出现了新的问题\" class=\"headerlink\" title=\"又出现了新的问题\"></a>又出现了新的问题</h3><p>系统已经上线运行  这个时候你已经着手进行下一个项目了,<br>可是..可是 领导觉得你的任务最近不多呀 提出让你对上一个项目进行优化<br>和扩展的需求, 这时候你再次打开了旧项目 居然发现项目编译不通过. 此处为了<br>演示编译无法通过,删除<code>DemoDaoImpl.java</code></p>\n<p>此时你的脑海里一定在翻滚,为么为么为么之前好好的,机器也没换啊,找到编译<br>出错的类<code>BeanFactory</code>,我x, 我的类去哪儿了,去哪儿了,去哪儿了,三连问之后<br>少了<code>DemoDaoImpl.java</code>  导致无法编译</p>\n<h4 id=\"依赖关系导致紧耦合\"><a href=\"#依赖关系导致紧耦合\" class=\"headerlink\" title=\"依赖关系导致紧耦合\"></a>依赖关系导致紧耦合</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回 mysql 的 Dao</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为 DemoDaoImpl.java不存在导致编译失败</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\">        <span class=\"comment\">// 返回 oracle 的 Dao</span></span><br><span class=\"line\"><span class=\"comment\">//        return new DemoOracleDaoImpl();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>BeanFactory</code>类中因 <code>DemoDaoImpl.java</code> 的不存在 而报红, 导致编译没法通过<br>像当前 <code>BeanFactory</code> <strong>强依赖于</strong> <code>DemoDaoImpl</code> (没有<code>DemoDaoImpl</code>就报红给你看)<br>这就是<strong>紧耦合</strong></p>\n<h4 id=\"解决紧耦合\"><a href=\"#解决紧耦合\" class=\"headerlink\" title=\"解决紧耦合\"></a>解决紧耦合</h4><p>没有这个Java文件  我没法干活呀 要不我自己造一个空的？？？ 不行不行<br>万一明天 <code>DemoOracleDaoImpl</code> 这个又没有了呢, 我不能总造空的玩呀<br>突然此时 你灵光一现 好像 好像 反射大概似乎可能也许可以解决这个问题呢<br><strong>反射可以声明一个类的全限定类名,进而获取它的字节码,这样也可以构造一个对象</strong></p>\n<p>于是乎 开干吧 <code>BeanFactory</code> 就成这样的了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) Class.forName(<span class=\"string\">&quot;com.huodd.dao.impl.DemoDaoImpl&quot;</span>).newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;IDemoDao instantiation error, cause: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在编译问题得以解决,虽然 <code>DemoService</code>在初始化的时候 还有有问题 但是整个项目<br>起码不会无法编译了</p>\n<h4 id=\"弱依赖的引入\"><a href=\"#弱依赖的引入\" class=\"headerlink\" title=\"弱依赖的引入\"></a>弱依赖的引入</h4><p>当前使用了反射 编译通过 但是工程启动后 由于<code>BeanFactory</code> 要构造 <code>DemoDaoImpl</code><br>时确实还没有该类,所以会抛出<code>ClassNotFoundException</code><br>但是此时的<code>BeanFactory</code>对<code>DemoDaoImpl</code> 的依赖程度(你愿意丢你就丢 别影响我编译)<br>就算的上是 <strong>弱依赖</strong>了</p>\n<h4 id=\"硬编码\"><a href=\"#硬编码\" class=\"headerlink\" title=\"硬编码\"></a>硬编码</h4><p>弱依赖的完成 你找遍电脑的各个盘 终于把 <code>DemoDaoImpl.java</code> 该类给找回来了,这下一切OK<br>不影响编译了,不影响运行了,但是好像还哪里不大对呢, 要是再切换数据库呢, 我在工厂类里面<br>写死了全限定类名,切换数据库的时候我还得去重新编译一遍工程才可以正常运行,<br>应该还可以有办法. 可以考虑下.</p>\n<h4 id=\"引入外部化的配置文件\"><a href=\"#引入外部化的配置文件\" class=\"headerlink\" title=\"引入外部化的配置文件\"></a>引入外部化的配置文件</h4><p>机智如你呀,终究被你想到了<strong>利用IO实现文件的存储配置</strong>  每次<code>BeanFactory</code><br>被初始化时 就让他去读取<strong>配置文件</strong>就好了 我下次就改改配置文件就行了<br>硬编码问题得以解决</p>\n<h5 id=\"factory-properties-创建\"><a href=\"#factory-properties-创建\" class=\"headerlink\" title=\"factory.properties 创建\"></a>factory.properties 创建</h5><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">demoDao</span>=<span class=\"string\">com.huodd.dao.impl.DemoDaoImpl</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为方便取到全限定类名,前面是我们给类起的一个”<strong>别名</strong>“(类似于mybatis的xml中的alias思想)<br>这样后面可以直接通过 “<strong>别名找到对应类的全限定名</strong>“</p>\n<h5 id=\"BeanFactory-改造\"><a href=\"#BeanFactory-改造\" class=\"headerlink\" title=\"BeanFactory 改造\"></a>BeanFactory 改造</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties properties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用静态代码块初始化properties，加载factord.properties文件</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        properties = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 必须使用类加载器读取resource文件夹下的配置文件</span></span><br><span class=\"line\">            properties.load(BeanFactory.class.getClassLoader().getResourceAsStream(<span class=\"string\">&quot;factory.properties&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// BeanFactory类的静态初始化都失败了，那后续也没有必要继续执行了</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ExceptionInInitializerError(<span class=\"string\">&quot;BeanFactory initialize error, cause: &quot;</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getDemoDao</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String beanName = properties.getProperty(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; beanClazz = Class.forName(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) beanClazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;BeanFactory have not [&quot;</span> + beanName + <span class=\"string\">&quot;] bean!&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;[&quot;</span> + beanName + <span class=\"string\">&quot;] instantiation error!&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>等等  等等  这里我们好像又把起的那个别名<code>demoDao</code>给写死了,得改 干脆<strong>传参</strong>吧<br>要哪个全限定类名参数传哪个全限定类名对应的别名 此时 <code>getDemoDao</code>这个名字得改还要加参数 此时<br>就叫<code>getBean</code>吧 根据别名获取相应的Bean对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDemoDao <span class=\"title\">getBean</span><span class=\"params\">(String beanAlias)</span> </span>&#123;</span><br><span class=\"line\">        String beanName = properties.getProperty(<span class=\"string\">&quot;beanAlias&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; beanClazz = Class.forName(beanName);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IDemoDao) beanClazz.newInstance();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;BeanFactory have not [&quot;</span> + beanName + <span class=\"string\">&quot;] bean!&quot;</span>, e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;[&quot;</span> + beanName + <span class=\"string\">&quot;] instantiation error!&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ServiceImpl-改造\"><a href=\"#ServiceImpl-改造\" class=\"headerlink\" title=\"ServiceImpl 改造\"></a>ServiceImpl 改造</h5><p><code>DemoServiceImpl</code> 中不能调用 <code>getDao</code> 方法(让我们给改成了<code>getBean(String beanAlias)</code>)了，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IDemoService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tIDemoDao demoDao = (IDemoDao) BeanFactory.getBean(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoDao.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到这里，你突然发现一个现象：<br>这下你可以把<strong>所有</strong>想抽取出来的<strong>组件都可以做成外部化配置</strong>了！</p>\n<p>PS: 自行去<code>DemoServlet</code>里面把对<code>DemoServiceImpl</code>的紧耦合改正</p>\n<blockquote>\n<p>算了 简单说一下<br>在 <code>factory.properties</code> 外部配置化文件 加入 <code>demoService=com.huodd.service.impl.DemoServiceImpl</code><br><code>DemoServlet</code>获取<code>DemoServiceImpl</code>改成 <code>IDemoService demoService = (IDemoService) BeanFactory.getBean(&quot;DemoServiceImpl&quot;);</code></p>\n</blockquote>\n<h4 id=\"外部配置化\"><a href=\"#外部配置化\" class=\"headerlink\" title=\"外部配置化\"></a>外部配置化</h4><p>对于这种可能会变化的配置、属性等，通常不会直接硬编码在源代码中，<br>而是抽取为一些配置文件的形式（ properties 、xml 、json 、yml 等），<br>配合程序对配置文件的加载和解析，从而达到动态配置、降低配置耦合的目的。<br>由此大概我们可以知道 原来并不是那些老外拍脑袋随便就乱搞才出来的这个IoC思想</p>\n<h4 id=\"多重构建问题\"><a href=\"#多重构建问题\" class=\"headerlink\" title=\"多重构建问题\"></a>多重构建问题</h4><p>细心的小伙伴可能已经发现 项目还会存在问题 影响性能的问题 也是很大的问题<br>就是<code>BeanFactory#getBean(String beanAlias)</code> 会重复创建同一个对象的多个实例<br>而我们根本就不需要每次都给我去创建新的对象实例,旧的就够用了<br>因此处不是本文重点  小伙伴自行改进  这里给出一个大概的思路</p>\n<blockquote>\n<p>可以考虑引入缓存 将创建出来的实例缓存起来 每次我们从缓存中读取<br>PS: 要多考虑一点哦 别忘了多线程并发问题</p>\n</blockquote>\n<p>到这里,不知道小伙伴是否对IOC有了个全新的认识和理解呢</p>\n<p>这里总结一下里面出现的几个关键点</p>\n<ul>\n<li>静态工厂可将多处依赖进行抽取分离</li>\n<li>外部化配置文件+反射可解决配置的硬编码问题</li>\n<li>缓存可控制对象实例数(这里我们并没有具体去实现小伙伴自行动手哦)</li>\n</ul>\n<p>接下来  是否解决了文章开始时小伙伴们的困惑呢？</p>\n<h2 id=\"IOC的思想引入\"><a href=\"#IOC的思想引入\" class=\"headerlink\" title=\"IOC的思想引入\"></a>IOC的思想引入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDemoDao dao = <span class=\"keyword\">new</span> DemoDaoImpl();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> IDemoDao dao = (IDemoDao) BeanFactory.getBean(<span class=\"string\">&quot;demoDao&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>对比如上两种方法获取<code>dao</code></p>\n<ul>\n<li>前者强依赖/紧耦合 后者弱依赖/松散耦合</li>\n<li>前者需保证<code>DemoDaoImpl</code>存在才能通过编译<br>后者无需保证<code>DemoDaoImpl</code>存在就可以通过编译 倘若<code>factory.properties</code> 中声明的全限定类名出现错误，<br>则会出现<code>ClassCastException </code></li>\n</ul>\n<p>仔细体会下面这种对象获取的方式，本来咱开发者可以使用上面的方式，<br>主动声明实现类，但如果选择下面的方式，<br>那就不再是咱自己去声明，而是将<strong>获取对象的方式交给了</strong><code>BeanFactory</code> 。<br>这种将<strong>控制权交给别人</strong>的思想，就可以称作：<strong>控制反转（ Inverse of Control , IOC ）</strong>。<br>而 BeanFactory 根据指定的 beanName 去获取和创建对象的过程，<br>就可以称作：<strong>依赖查找（ Dependency Lookup , DL ）</strong>。</p>\n<h2 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h2><p>本文源代码获取 可添加公众号”PoXing” 回复【IOC】进行获取<br>扫码添加一下吧~~~<br><img src=\"/2021/01/11/%E7%9C%8B%E5%AE%8C%E6%AD%A4%E6%96%87-%E5%88%AB%E8%AF%B4%E4%BD%A0%E4%B8%8D%E6%87%82IoC%E6%98%AF%E4%BB%80%E4%B9%88/PoXing.jpg\" alt=\"公众号二维码\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/01.png","slug":"01.png","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/02.png","slug":"02.png","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/03.png","slug":"03.png","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/04.jpg","slug":"04.jpg","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/05.png","slug":"05.png","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/06.jpg","slug":"06.jpg","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/07.jpg","slug":"07.jpg","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/PoXing.jpg","slug":"PoXing.jpg","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0},{"_id":"source/_posts/看完此文-别说你不懂IoC是什么/封面图.png","slug":"封面图.png","post":"ckju4q9jv0007mkuvdsw79p0y","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckju4q9jo0001mkuv3kg7c2wf","category_id":"ckju4q9jt0004mkuv8yrqhe1f","_id":"ckju4q9jz000cmkuv5wek7yxq"},{"post_id":"ckju4q9jr0003mkuv8uuz1tmf","category_id":"ckju4q9jt0004mkuv8yrqhe1f","_id":"ckju4q9k0000fmkuv8ck46p7b"},{"post_id":"ckju4q9jv0007mkuvdsw79p0y","category_id":"ckju4q9jz000bmkuvguxt4a2f","_id":"ckju4q9k1000imkuvermh5r4x"}],"PostTag":[{"post_id":"ckju4q9jo0001mkuv3kg7c2wf","tag_id":"ckju4q9ju0005mkuvb0f53l5f","_id":"ckju4q9k0000emkuvgweccbrv"},{"post_id":"ckju4q9jo0001mkuv3kg7c2wf","tag_id":"ckju4q9jx000amkuv9woy0jub","_id":"ckju4q9k0000gmkuvghoqaq47"},{"post_id":"ckju4q9jr0003mkuv8uuz1tmf","tag_id":"ckju4q9ju0005mkuvb0f53l5f","_id":"ckju4q9k2000kmkuv921yhfrg"},{"post_id":"ckju4q9jr0003mkuv8uuz1tmf","tag_id":"ckju4q9jx000amkuv9woy0jub","_id":"ckju4q9k2000lmkuv8lx8dauo"},{"post_id":"ckju4q9jv0007mkuvdsw79p0y","tag_id":"ckju4q9k1000jmkuv5teb4mta","_id":"ckju4q9k2000nmkuv9470fao6"},{"post_id":"ckju4q9jv0007mkuvdsw79p0y","tag_id":"ckju4q9k2000mmkuvc9q36qjm","_id":"ckju4q9k2000omkuvenya0heu"}],"Tag":[{"name":"Hello","_id":"ckju4q9ju0005mkuvb0f53l5f"},{"name":"World","_id":"ckju4q9jx000amkuv9woy0jub"},{"name":"Spring","_id":"ckju4q9k1000jmkuv5teb4mta"},{"name":"SpringIoC","_id":"ckju4q9k2000mmkuvc9q36qjm"}]}}